{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kfirt\\\\WebstormProjects\\\\fed-cost-manager\\\\src\\\\components\\\\Table.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { TableVirtuoso } from 'react-virtuoso';\nimport LocalStorage from '../localStorage.js';\n\n// Kfir Tayar 208991430\n//\n\n//import React from 'react';\nimport './addcost.css';\nimport { useState, useEffect } from 'react';\n//import LocalStorage from \"./localStorage\";\n\n// Components from MUI lib\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddCard from '@mui/icons-material/AddCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddCostPage = () => {\n  _s();\n  // This useEffect hook updates the document title to 'Cost Manager'\n  useEffect(() => {\n    document.title = 'Cost Manager App';\n  }, []);\n  useEffect(() => {\n    // This useEffect hook retrieves the inputs saved in local storage and sets them to the inputs state variable\n    const inputsFromLocalStorage = LocalStorage.get('inputs');\n    if (inputsFromLocalStorage) {\n      setInputs(inputsFromLocalStorage);\n    }\n  }, []);\n\n  // These state variables are used to store the values of the inputs\n  const [date, setDate] = useState('');\n  const [sum, setSum] = useState('');\n  const [category, setCategory] = useState('');\n  const [currency, setCurrency] = useState('');\n  const [description, setDescription] = useState('');\n  const [inputs, setInputs] = useState([]);\n\n  // This function is called when the user clicks the add cost button\n  var index = 1;\n\n  /*return (\r\n      <div className=\"add-cost-page\">\r\n          <h1>Cost Manager App<br/>\r\n              Please insert your costs</h1>\r\n          <div className=\"add-cost-form\">\r\n                <div>\r\n                  <div className=\"add-cost-form-fields\">\r\n                      <label className='add-cost-form-labels'>Date:</label>\r\n                      <input type=\"date\" value={date}\r\n                             onChange={e => setDate(e.target.value)} required\r\n                             autoComplete={'off'} />\r\n                  </div>\r\n                  <div className=\"add-cost-form-fields\">\r\n                      <label className='add-cost-form-labels'>Sum: </label><input type=\"number\" value={sum}\r\n                                                                                  onChange={e => setSum(e.target.value)}/>\r\n                  </div>\r\n              </div>\r\n                <div>\r\n                  <div className=\"add-cost-form-fields\">\r\n                      <label className='add-cost-form-labels'>Category:</label>\r\n                      <select value={category} onChange={e => setCategory(e.target.value)}>\r\n                          <option value=\"food\">Food</option>\r\n                          <option value=\"health\">Health</option>\r\n                          <option value=\"housing\">Housing</option>\r\n                          <option value=\"sport\">Sport</option>\r\n                          <option value=\"education\">Education</option>\r\n                          <option value=\"transportation\">Transportation</option>\r\n                          <option value=\"other\">Other</option>\r\n                      </select>\r\n                  </div>\r\n                    <div className=\"add-cost-form-fields\">\r\n                      <label className='add-cost-form-labels'>Currency:</label>\r\n                      <select value={currency} onChange={e => setCurrency(e.target.value)}>\r\n                          <option value=\"ILS\">ILS</option>\r\n                          <option value=\"USD\">USD</option>\r\n                          <option value=\"GPB\">GPB</option>\r\n                          <option value=\"EUR\">EUR</option>\r\n                          <option value=\"CNY\">CNY</option>\r\n                      </select>\r\n                  </div>\r\n              </div>\r\n                <div>\r\n                  <div className=\"add-cost-form-fields\">\r\n                      <label className='add-cost-form-labels'>Description: </label>\r\n                      <textarea value={description} onChange={e => setDescription(e.target.value)}\r\n                                placeholder=\"Enter description\"></textarea>\r\n                  </div>\r\n                      <Button fullWidth='True' variant=\"contained\" color=\"secondary\" endIcon={<AddCard />}\r\n                          onClick={() => {\r\n                                // Validate if the necessary categories are exist\r\n                              if (!sum || !category || !description) {\r\n                                  alert(\"please enter all field\")\r\n                                  return;\r\n                              }\r\n                                // Passing the inputs into an array\r\n                              setInputs([...inputs, {date, sum, category, currency, description}]);\r\n                                //Using localStorage to save the input parameters\r\n                              localStorage.setItem('inputs', JSON.stringify([...inputs, {\r\n                                  date,\r\n                                  sum,\r\n                                  category,\r\n                                  currency,\r\n                                  description\r\n                              }]));\r\n                                setSum(''); // Clear the date input\r\n                              setCurrency(''); // Clear the item input\r\n                              setCategory(''); // Clear the price input\r\n                              setDate(''); // Reset the category to default\r\n                              setDescription(''); // Clear the description input\r\n                              alert(\"Cost added successfully\");\r\n                            }}>Add cost\r\n                  </Button>\r\n              </div>\r\n          </div>\r\n              <table>\r\n              <thead>\r\n              <tr>\r\n                  <th>Index</th>\r\n                  <th>Sum</th>\r\n                  <th>Category</th>\r\n                  <th>Currency</th>\r\n                  <th>Date</th>\r\n                  <th>Description</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n              {inputs.map((input) => (\r\n                  <tr>\r\n                      <td>{index++}</td>\r\n                      <td>{input.sum}</td>\r\n                      <td>{input.category}</td>\r\n                      <td>{input.currency}</td>\r\n                      <td>{input.date}</td>\r\n                      <td>{input.description}</td>\r\n                        <Button\r\n                          variant=\"outlined\" startIcon={<DeleteIcon />} size=\"medium\" color=\"error\" onClick={() => {\r\n                          inputs.splice(inputs[index], 1); // Remove the item from the inputs state variable\r\n                          setInputs([...inputs]); // Update the inputs state variable\r\n                          LocalStorage.set('inputs', inputs); // Update local storage\r\n                      }}\r\n                      >\r\n                          Delete cost\r\n                      </Button>\r\n                    </tr>\r\n              ))}\r\n              </tbody>\r\n          </table>\r\n        </div>\r\n  );\r\n  }*/\n\n  const sample = [['Frozen yoghurt', 159, 6.0, 24, 4.0], ['Ice cream sandwich', 237, 9.0, 37, 4.3], ['Eclair', 262, 16.0, 24, 6.0], ['Cupcake', 305, 3.7, 67, 4.3], ['Gingerbread', 356, 16.0, 49, 3.9]];\n  function createData(Index, Sum, Category, Currency, Date, Description) {\n    return {\n      Index,\n      Sum,\n      Category,\n      Currency,\n      Date,\n      Description\n    };\n  }\n  const columns = [{\n    width: 50,\n    label: 'Index',\n    dataKey: 'Index'\n  }, {\n    width: 50,\n    label: 'Sum',\n    dataKey: 'Sum',\n    numeric: true\n  }, {\n    width: 50,\n    label: 'Category',\n    dataKey: 'Category',\n    numeric: false\n  }, {\n    width: 50,\n    label: 'Currency',\n    dataKey: 'Currency',\n    string: true\n  }, {\n    width: 50,\n    label: 'Date',\n    dataKey: 'Date',\n    string: true\n  }, {\n    width: 50,\n    label: 'Description',\n    dataKey: 'Description',\n    string: true\n  }];\n  const rows = Array.from({\n    length: 10\n  }, (_, index) => {\n    const randomSelection = sample[Math.floor(Math.random() * sample.length)];\n    return createData(index, ...randomSelection);\n  });\n  const VirtuosoTableComponents = {\n    Scroller: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      ...props,\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)),\n    Table: props => /*#__PURE__*/_jsxDEV(Table, {\n      ...props,\n      style: {\n        borderCollapse: 'separate'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 27\n    }, this),\n    TableHead,\n    TableRow: _ref => {\n      let {\n        item: _item,\n        ...props\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(TableRow, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 48\n      }, this);\n    },\n    TableBody: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(TableBody, {\n      ...props,\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 53\n    }, this))\n  };\n  function fixedHeaderContent() {\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n        variant: \"head\",\n        align: column.numeric || false ? 'right' : 'left',\n        style: {\n          width: column.width\n        },\n        sx: {\n          backgroundColor: '5e35b1'\n        },\n        children: column.label\n      }, column.dataKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n  function rowContent(_index, row) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n        align: column.numeric || false ? 'right' : 'left',\n        children: row[column.inputs]\n      }, column.dataKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this);\n  }\n  function ReactVirtualizedTable() {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        height: 300,\n        width: '75%'\n      },\n      children: /*#__PURE__*/_jsxDEV(TableVirtuoso, {\n        data: rows,\n        components: VirtuosoTableComponents,\n        fixedHeaderContent: fixedHeaderContent,\n        itemContent: rowContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(AddCostPage, \"kDXe3P6s0+6sIEPaCqLPV0w/XCI=\");\n_c = AddCostPage;\nvar _c;\n$RefreshReg$(_c, \"AddCostPage\");","map":{"version":3,"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","TableVirtuoso","LocalStorage","useState","useEffect","Button","DeleteIcon","AddCard","AddCostPage","document","title","inputsFromLocalStorage","get","setInputs","date","setDate","sum","setSum","category","setCategory","currency","setCurrency","description","setDescription","inputs","index","sample","createData","Index","Sum","Category","Currency","Date","Description","columns","width","label","dataKey","numeric","string","rows","Array","from","length","_","randomSelection","Math","floor","random","VirtuosoTableComponents","Scroller","forwardRef","props","ref","borderCollapse","item","_item","fixedHeaderContent","map","column","backgroundColor","rowContent","_index","row","ReactVirtualizedTable","height"],"sources":["C:/Users/Kfirt/WebstormProjects/fed-cost-manager/src/components/Table.js"],"sourcesContent":["import * as React from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { TableVirtuoso } from 'react-virtuoso';\r\nimport LocalStorage from '../localStorage.js'\r\n\r\n// Kfir Tayar 208991430\r\n//\r\n\r\n//import React from 'react';\r\nimport './addcost.css';\r\nimport {useState, useEffect} from 'react';\r\n//import LocalStorage from \"./localStorage\";\r\n\r\n// Components from MUI lib\r\nimport Button from '@mui/material/Button';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddCard from '@mui/icons-material/AddCard';\r\n\r\nconst AddCostPage = () => {\r\n    // This useEffect hook updates the document title to 'Cost Manager'\r\n    useEffect(() => {\r\n        document.title = 'Cost Manager App';\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // This useEffect hook retrieves the inputs saved in local storage and sets them to the inputs state variable\r\n        const inputsFromLocalStorage = LocalStorage.get('inputs');\r\n        if (inputsFromLocalStorage) {\r\n            setInputs(inputsFromLocalStorage);\r\n        }\r\n    }, []);\r\n\r\n    // These state variables are used to store the values of the inputs\r\n    const [date, setDate] = useState('');\r\n    const [sum, setSum] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [currency, setCurrency] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [inputs, setInputs] = useState([]);\r\n\r\n    // This function is called when the user clicks the add cost button\r\n    var index = 1;\r\n\r\n    /*return (\r\n        <div className=\"add-cost-page\">\r\n            <h1>Cost Manager App<br/>\r\n                Please insert your costs</h1>\r\n            <div className=\"add-cost-form\">\r\n\r\n                <div>\r\n                    <div className=\"add-cost-form-fields\">\r\n                        <label className='add-cost-form-labels'>Date:</label>\r\n                        <input type=\"date\" value={date}\r\n                               onChange={e => setDate(e.target.value)} required\r\n                               autoComplete={'off'} />\r\n                    </div>\r\n                    <div className=\"add-cost-form-fields\">\r\n                        <label className='add-cost-form-labels'>Sum: </label><input type=\"number\" value={sum}\r\n                                                                                    onChange={e => setSum(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"add-cost-form-fields\">\r\n                        <label className='add-cost-form-labels'>Category:</label>\r\n                        <select value={category} onChange={e => setCategory(e.target.value)}>\r\n                            <option value=\"food\">Food</option>\r\n                            <option value=\"health\">Health</option>\r\n                            <option value=\"housing\">Housing</option>\r\n                            <option value=\"sport\">Sport</option>\r\n                            <option value=\"education\">Education</option>\r\n                            <option value=\"transportation\">Transportation</option>\r\n                            <option value=\"other\">Other</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"add-cost-form-fields\">\r\n                        <label className='add-cost-form-labels'>Currency:</label>\r\n                        <select value={currency} onChange={e => setCurrency(e.target.value)}>\r\n                            <option value=\"ILS\">ILS</option>\r\n                            <option value=\"USD\">USD</option>\r\n                            <option value=\"GPB\">GPB</option>\r\n                            <option value=\"EUR\">EUR</option>\r\n                            <option value=\"CNY\">CNY</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"add-cost-form-fields\">\r\n                        <label className='add-cost-form-labels'>Description: </label>\r\n                        <textarea value={description} onChange={e => setDescription(e.target.value)}\r\n                                  placeholder=\"Enter description\"></textarea>\r\n                    </div>\r\n\r\n\r\n                    <Button fullWidth='True' variant=\"contained\" color=\"secondary\" endIcon={<AddCard />}\r\n                            onClick={() => {\r\n\r\n                                // Validate if the necessary categories are exist\r\n                                if (!sum || !category || !description) {\r\n                                    alert(\"please enter all field\")\r\n                                    return;\r\n                                }\r\n\r\n                                // Passing the inputs into an array\r\n                                setInputs([...inputs, {date, sum, category, currency, description}]);\r\n\r\n                                //Using localStorage to save the input parameters\r\n                                localStorage.setItem('inputs', JSON.stringify([...inputs, {\r\n                                    date,\r\n                                    sum,\r\n                                    category,\r\n                                    currency,\r\n                                    description\r\n                                }]));\r\n\r\n                                setSum(''); // Clear the date input\r\n                                setCurrency(''); // Clear the item input\r\n                                setCategory(''); // Clear the price input\r\n                                setDate(''); // Reset the category to default\r\n                                setDescription(''); // Clear the description input\r\n                                alert(\"Cost added successfully\");\r\n\r\n                            }}>Add cost\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Index</th>\r\n                    <th>Sum</th>\r\n                    <th>Category</th>\r\n                    <th>Currency</th>\r\n                    <th>Date</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {inputs.map((input) => (\r\n                    <tr>\r\n                        <td>{index++}</td>\r\n                        <td>{input.sum}</td>\r\n                        <td>{input.category}</td>\r\n                        <td>{input.currency}</td>\r\n                        <td>{input.date}</td>\r\n                        <td>{input.description}</td>\r\n\r\n                        <Button\r\n                            variant=\"outlined\" startIcon={<DeleteIcon />} size=\"medium\" color=\"error\" onClick={() => {\r\n                            inputs.splice(inputs[index], 1); // Remove the item from the inputs state variable\r\n                            setInputs([...inputs]); // Update the inputs state variable\r\n                            LocalStorage.set('inputs', inputs); // Update local storage\r\n                        }}\r\n                        >\r\n                            Delete cost\r\n                        </Button>\r\n\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    );\r\n}*/\r\n\r\n\r\n    const sample = [\r\n        ['Frozen yoghurt', 159, 6.0, 24, 4.0],\r\n        ['Ice cream sandwich', 237, 9.0, 37, 4.3],\r\n        ['Eclair', 262, 16.0, 24, 6.0],\r\n        ['Cupcake', 305, 3.7, 67, 4.3],\r\n        ['Gingerbread', 356, 16.0, 49, 3.9],\r\n    ];\r\n\r\n    function createData(Index, Sum, Category, Currency, Date, Description) {\r\n        return {Index, Sum, Category, Currency, Date, Description};\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            width: 50,\r\n            label: 'Index',\r\n            dataKey: 'Index',\r\n        },\r\n        {\r\n            width: 50,\r\n            label: 'Sum',\r\n            dataKey: 'Sum',\r\n            numeric: true,\r\n        },\r\n        {\r\n            width: 50,\r\n            label: 'Category',\r\n            dataKey: 'Category',\r\n            numeric: false,\r\n        },\r\n        {\r\n            width: 50,\r\n            label: 'Currency',\r\n            dataKey: 'Currency',\r\n            string: true,\r\n        },\r\n        {\r\n            width: 50,\r\n            label: 'Date',\r\n            dataKey: 'Date',\r\n            string: true,\r\n        },\r\n        {\r\n            width: 50,\r\n            label: 'Description',\r\n            dataKey: 'Description',\r\n            string: true,\r\n        },\r\n    ];\r\n\r\n    const rows = Array.from({length: 10}, (_, index) => {\r\n        const randomSelection = sample[Math.floor(Math.random() * sample.length)];\r\n        return createData(index, ...randomSelection);\r\n    });\r\n\r\n    const VirtuosoTableComponents = {\r\n\r\n        Scroller: React.forwardRef((props, ref) => (\r\n            <TableContainer component={Paper} {...props} ref={ref}/>\r\n        )),\r\n        Table: (props) => <Table {...props} style={{borderCollapse: 'separate'}}/>,\r\n        TableHead,\r\n        TableRow: ({item: _item, ...props}) => <TableRow {...props} />,\r\n        TableBody: React.forwardRef((props, ref) => <TableBody {...props} ref={ref}/>),\r\n    };\r\n\r\n    function fixedHeaderContent() {\r\n        return (\r\n            <TableRow>\r\n                {columns.map((column) => (\r\n                    <TableCell\r\n                        key={column.dataKey}\r\n                        variant=\"head\"\r\n                        align={column.numeric || false ? 'right' : 'left'}\r\n                        style={{width: column.width}}\r\n                        sx={{\r\n                            backgroundColor: '5e35b1',\r\n                        }}\r\n                    >\r\n                        {column.label}\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        );\r\n    }\r\n\r\n    function rowContent(_index, row) {\r\n        return (\r\n            <React.Fragment>\r\n                {columns.map((column) => (\r\n                    <TableCell\r\n                        key={column.dataKey}\r\n                        align={column.numeric || false ? 'right' : 'left'}\r\n                    >\r\n                        {row[column.inputs]}\r\n                    </TableCell>\r\n                ))}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    function ReactVirtualizedTable() {\r\n        return (\r\n            <Paper style={{height: 300, width: '75%'}}>\r\n                <TableVirtuoso\r\n                    data={rows}\r\n                    components={VirtuosoTableComponents}\r\n                    fixedHeaderContent={fixedHeaderContent}\r\n                    itemContent={rowContent}\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}