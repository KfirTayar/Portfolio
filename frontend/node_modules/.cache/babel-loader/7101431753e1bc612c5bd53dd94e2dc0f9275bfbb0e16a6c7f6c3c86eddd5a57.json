{"ast":null,"code":"// Kfir Tayar 208991430\n\nconst LocalStorage = {\n  get: key => {\n    return JSON.parse(localStorage.getItem(key));\n  },\n  set: (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n  remove: key => {\n    localStorage.removeItem(key);\n  },\n  async getCostsByMonthAndYear(month, year) {\n    const allCosts = JSON.parse(localStorage.getItem(\"costs\")) || [];\n    console.log(month, year);\n    const costsForMonthAndYear = allCosts.filter(cost => {\n      const costDate = new Date(cost.purchaseDate);\n      console.log(\"test for the date.\" + costDate.toISOString());\n      return costDate.getMonth() === parseInt(month) && costDate.getFullYear() === parseInt(year);\n    });\n    console.log(costsForMonthAndYear.length);\n    return costsForMonthAndYear;\n  },\n  async getCostsByYear(year) {\n    const allCosts = JSON.parse(localStorage.getItem(\"costs\")) || [];\n    const costsForYear = allCosts.filter(cost => {\n      const costDate = new Date(cost.purchaseDate);\n      return costDate.getFullYear() === parseInt(year);\n    });\n    return costsForYear;\n  },\n  async addCost(key, value) {\n    let allCosts = JSON.parse(localStorage.getItem(\"costs\")) || [];\n    allCosts.push({\n      ...cost,\n      purchaseDate: new Date(cost.purchaseDate)\n    });\n    localStorage.setItem(\"costs\", JSON.stringify(allCosts));\n  }\n};\nexport default LocalStorage;","map":{"version":3,"names":["LocalStorage","get","key","JSON","parse","localStorage","getItem","set","value","setItem","stringify","remove","removeItem","getCostsByMonthAndYear","month","year","allCosts","console","log","costsForMonthAndYear","filter","cost","costDate","Date","purchaseDate","toISOString","getMonth","parseInt","getFullYear","length","getCostsByYear","costsForYear","addCost","push"],"sources":["C:/Users/Kfirt/WebstormProjects/fed-cost-manager/src/localStorage.js"],"sourcesContent":["// Kfir Tayar 208991430\r\n\r\nconst LocalStorage = {\r\n\r\n    get: (key) => {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    },\r\n\r\n    set: (key, value) => {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    },\r\n\r\n    remove: (key) => {\r\n      localStorage.removeItem(key);\r\n    },\r\n\r\n    async getCostsByMonthAndYear(month, year) {\r\n        const allCosts = JSON.parse(localStorage.getItem(\"costs\")) || [];\r\n        console.log(month, year);\r\n        const costsForMonthAndYear = allCosts.filter((cost) => {\r\n            const costDate = new Date(cost.purchaseDate);\r\n            console.log(\"test for the date.\" + costDate.toISOString());\r\n            return (\r\n                costDate.getMonth() === parseInt(month) &&\r\n                costDate.getFullYear() === parseInt(year)\r\n            );\r\n        });\r\n        console.log(costsForMonthAndYear.length);\r\n        return costsForMonthAndYear;\r\n    },\r\n\r\n    async getCostsByYear(year) {\r\n        const allCosts = JSON.parse(localStorage.getItem(\"costs\")) || [];\r\n        const costsForYear = allCosts.filter((cost) => {\r\n            const costDate = new Date(cost.purchaseDate);\r\n            return costDate.getFullYear() === parseInt(year);\r\n        });\r\n        return costsForYear;\r\n    },\r\n\r\n    async addCost(key, value) {\r\n        let allCosts = JSON.parse(localStorage.getItem(\"costs\")) || [];\r\n        allCosts.push({ ...cost, purchaseDate: new Date(cost.purchaseDate) });\r\n        localStorage.setItem(\"costs\", JSON.stringify(allCosts));\r\n    },\r\n};\r\n\r\nexport default LocalStorage;\r\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG;EAEjBC,GAAG,EAAGC,GAAG,IAAK;IACV,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACJ,GAAG,CAAC,CAAC;EAChD,CAAC;EAEDK,GAAG,EAAE,CAACL,GAAG,EAAEM,KAAK,KAAK;IACjBH,YAAY,CAACI,OAAO,CAACP,GAAG,EAAEC,IAAI,CAACO,SAAS,CAACF,KAAK,CAAC,CAAC;EACpD,CAAC;EAEDG,MAAM,EAAGT,GAAG,IAAK;IACfG,YAAY,CAACO,UAAU,CAACV,GAAG,CAAC;EAC9B,CAAC;EAED,MAAMW,sBAAsB,CAACC,KAAK,EAAEC,IAAI,EAAE;IACtC,MAAMC,QAAQ,GAAGb,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;IAChEW,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEC,IAAI,CAAC;IACxB,MAAMI,oBAAoB,GAAGH,QAAQ,CAACI,MAAM,CAAEC,IAAI,IAAK;MACnD,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,YAAY,CAAC;MAC5CP,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGI,QAAQ,CAACG,WAAW,EAAE,CAAC;MAC1D,OACIH,QAAQ,CAACI,QAAQ,EAAE,KAAKC,QAAQ,CAACb,KAAK,CAAC,IACvCQ,QAAQ,CAACM,WAAW,EAAE,KAAKD,QAAQ,CAACZ,IAAI,CAAC;IAEjD,CAAC,CAAC;IACFE,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAACU,MAAM,CAAC;IACxC,OAAOV,oBAAoB;EAC/B,CAAC;EAED,MAAMW,cAAc,CAACf,IAAI,EAAE;IACvB,MAAMC,QAAQ,GAAGb,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;IAChE,MAAMyB,YAAY,GAAGf,QAAQ,CAACI,MAAM,CAAEC,IAAI,IAAK;MAC3C,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,YAAY,CAAC;MAC5C,OAAOF,QAAQ,CAACM,WAAW,EAAE,KAAKD,QAAQ,CAACZ,IAAI,CAAC;IACpD,CAAC,CAAC;IACF,OAAOgB,YAAY;EACvB,CAAC;EAED,MAAMC,OAAO,CAAC9B,GAAG,EAAEM,KAAK,EAAE;IACtB,IAAIQ,QAAQ,GAAGb,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;IAC9DU,QAAQ,CAACiB,IAAI,CAAC;MAAE,GAAGZ,IAAI;MAAEG,YAAY,EAAE,IAAID,IAAI,CAACF,IAAI,CAACG,YAAY;IAAE,CAAC,CAAC;IACrEnB,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAACM,QAAQ,CAAC,CAAC;EAC3D;AACJ,CAAC;AAED,eAAehB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}